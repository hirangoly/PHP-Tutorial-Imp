Linux Commands
Cron job – to schedule a script
Crontab:
i = insert, this allows you to edit the crontab
esc = removes you from insert mode,
:w! = save changes
:q! = quit without saving changes (if any were made)
:wq! = “w” tells the editor that you want to “write” and “quit” (w = write, q = quit), “!” execute the command forcefully
 To see what crontabs are currently running on your system
$ sudocrontab-l
To edit the list of cronjobs you can run:
$ sudocrontab-e

Cronjobs are written in the following format:
*****/bin/execute/this/script.sh
As you can see there are 5 stars. The stars represent different date parts in the following order:
•	minute (from 0 to 59)
•	hour (from 0 to 23)
•	day of month (from 1 to 31)
•	month (from 1 to 12)
•	day of week (from 0 to 6) (0=Sunday)
Execute every minute
*****/bin/execute/this/script.sh
•	every minute
•	of every hour
•	of every day of the month
•	of every month
•	and every day in the week.
In short: This script is being executed every minute. Without exception.
Execute every Friday 1AM
01**5/bin/execute/this/script.sh
Get it? The script is now being executed when the system clock hits:
•	minute: 0
•	of hour: 1
•	of day of month: * (every day of month)
•	of month: * (every month)
•	and weekday: 5 (=Friday)
Execute on workdays 1AM
01**1-5/bin/execute/this/script.sh

Execute 10 past after every hour on the 1st of every month
10*1**/bin/execute/this/script.sh

want to run something every 10 minutes
*/10****/bin/execute/this/script.sh
Or
0,10,20,30,40,50****/bin/execute/this/script.sh

Special words
For the first (minute) field, you can also put in a keyword instead of a number:
@reboot     Run once, at startup
@yearly     Run once  a year     "0 0 1 1 *"
@annually   (same as  @yearly)
@monthly    Run once  a month    "0 0 1 * *"
@weekly     Run once  a week     "0 0 * * 0"
@daily      Run once  a day      "0 0 * * *"
@midnight   (same as  @daily)
@hourly     Run once  an hour    "0 * * * *"

@daily /bin/execute/this/script.sh

Storing the crontab output
By default cron saves the output of /bin/execute/this/script.sh 
Else use this:
*/10****/bin/execute/this/script.sh >>/var/log/script_output.log 2>&1

Where > will overwrite the file, >> will append to the file.
>>/var/log/script_output.log

Explaination
Linux can report on different levels. There's standard output (STDOUT) and standard errors (STDERR). STDOUT is marked 1, STDERR is marked 2. So the following statement tells Linux to store STDERR in STDOUT as well, creating one datastream for messages & errors:
2>&1

Mailing the crontab output
By default cron saves the output in the user's mailbox (root in this case) on the local system. But you can also configure crontab to forward all output to a real email address by starting your crontab with the following line:
MAILTO="yourname@yourdomain.com"
Mailing the crontab output of just one cronjob
If you'd rather receive only one cronjob's output in your mail, make sure this package is installed:
$ aptitude install mailx
And change the cronjob like this:
*/10****/bin/execute/this/script.sh 2>&1| mail -s "Cronjobouput"yourname@yourd

Trashing the crontab output
Now that's easy:
*/10****/bin/execute/this/script.sh >/dev/null 2>&1

MySQL permission access:
mysql> INSERT INTO user (Host, User, Password, Select_priv) VALUES ('localhost', 'RangoliMrktng', password('rngl189'), 'N');
mysql> FLUSH PRIVILEGES;   
mysql> GRANT ALL PRIVILEGES ON projects.* TO RangoliMrktng;
mysql> GRANT ALL PRIVILEGES ON scrapers.* TO RangoliMrktng;
mysql> GRANT ALL PRIVILEGES ON ilot.* TO RangoliMrktng;
and so on.....
mysql> FLUSH PRIVILEGES;   
mysql> quit;

Some commands:
 vmstat - System Activity, Hardware and System Information
The command vmstat reports information about processes, memory, paging, block IO, traps, and cpu activity.
# vmstat 3
Sample Outputs:
procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
r  bswpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wast
0  0      0 2540988 522188 5130400    0    0     2    32    4    2  4  1 96  0  0
1  0      0 2540988 522188 5130400    0    0     0   720 1199  665  1  0 99  0  0
0  0      0 2540956 522188 5130400    0    0     0     0 1151 1569  4  1 95  0  0
0  0      0 2540956 522188 5130500    0    0     0     6 1117  439  1  0 99  0  0
0  0      0 2540940 522188 5130512    0    0     0   536 1189  932  1  0 98  0  0
0  0      0 2538444 522188 5130588    0    0     0     0 1187 1417  4  1 96  0  0
0  0      0 2490060 522188 5130640    0    0     0    18 1253 1123  5  1 94  0  0
w - Find Out Who Is Logged on And What They Are Doing
w command displays information about the users currently on the machine, and their processes.
# w username
# w vivek
Sample Outputs:
 17:58:47 up 5 days, 20:28,  2 users,  load average: 0.36, 0.26, 0.24
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT
rootpts/0    10.1.3.145       14:55    5.00s  0.04s  0.02s vim /etc/resolv.conf
rootpts/1    10.1.3.145       17:43    0.00s  0.03s  0.00s w
uptime - Tell How Long The System Has Been Running
The uptime command can be used to see how long the server has been running. The current time, how long the system has been running, how many users are currently logged on, and the system load averages for the past 1, 5, and 15 minutes.
# uptime
Output:
 18:02:41 up 41 days, 23:42,  1 user,  load average: 0.00, 0.00, 0.00
iostat - Average CPU Load, Disk Activity
The command iostat report Central Processing Unit (CPU) statistics and input/output statistics for devices, partitions and network filesystems (NFS).
# iostat
Sample Outputs:
Linux 2.6.18-128.1.14.el5 (www03.nixcraft.in) 	06/26/2009
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           3.50    0.09    0.51    0.03    0.00   95.86
Device:            tpsBlk_read/s   Blk_wrtn/s   Blk_readBlk_wrtn
sda              22.04        31.88       512.03   16193351  260102868
sda1              0.00         0.00         0.00       2166        180
sda2             22.04        31.87       512.03   16189010  260102688
sda3              0.00         0.00         0.00       1615          0


